[{"/home/oddgrd/reactApps/drum-machine/src/index.js":"1","/home/oddgrd/reactApps/drum-machine/src/reportWebVitals.js":"2","/home/oddgrd/reactApps/drum-machine/src/App.js":"3","/home/oddgrd/reactApps/drum-machine/src/components/DrumPads.js":"4","/home/oddgrd/reactApps/drum-machine/src/components/Settings.js":"5","/home/oddgrd/reactApps/drum-machine/src/custom-hooks/useKeyPress.js":"6"},{"size":562,"mtime":1610895729938,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1610725016651,"results":"9","hashOfConfig":"8"},{"size":3547,"mtime":1611163711556,"results":"10","hashOfConfig":"8"},{"size":1483,"mtime":1611165126307,"results":"11","hashOfConfig":"8"},{"size":1637,"mtime":1611165322351,"results":"12","hashOfConfig":"8"},{"size":972,"mtime":1611157559356,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"16dan97",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"16"},"/home/oddgrd/reactApps/drum-machine/src/index.js",[],["28","29"],"/home/oddgrd/reactApps/drum-machine/src/reportWebVitals.js",[],"/home/oddgrd/reactApps/drum-machine/src/App.js",[],"/home/oddgrd/reactApps/drum-machine/src/components/DrumPads.js",[],"/home/oddgrd/reactApps/drum-machine/src/components/Settings.js",[],"/home/oddgrd/reactApps/drum-machine/src/custom-hooks/useKeyPress.js",["30"],"import { useState, useEffect } from \"react\";\n\n// Hook\n\nfunction useKeyPress(targetKey) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false);\n  // If pressed key is our target key then set to true\n  function downHandler({ key }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  // If released key is our target key then set to false\n  const upHandler = ({ key }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n  return keyPressed;\n}\n\nexport default useKeyPress;\n",{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":31,"column":6,"nodeType":"37","endLine":31,"endColumn":8,"suggestions":"38"},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'downHandler' and 'upHandler'. Either include them or remove the dependency array.","ArrayExpression",["41"],"no-global-assign","no-unsafe-negation",{"desc":"42","fix":"43"},"Update the dependencies array to be: [downHandler, upHandler]",{"range":"44","text":"45"},[847,849],"[downHandler, upHandler]"]